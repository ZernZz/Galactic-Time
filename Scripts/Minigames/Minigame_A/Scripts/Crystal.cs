using UnityEngine;
using Unity.Netcode;

public class Crystal : NetworkBehaviour
{
    public int pointValue;
    private bool gameEnded = false;

    public void StopCrystalCollection() => gameEnded = true;

    private void OnTriggerEnter(Collider other)
    {
        if (!other.CompareTag("Player")) return;

        var playerNetworkObject = other.GetComponent<NetworkObject>();
        if (playerNetworkObject == null) return;

        // üõ† ‡∏ã‡πà‡∏≠‡∏ô Crystal ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà Client ‡∏ä‡∏ô (‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÑ‡∏ß)
        gameObject.SetActive(false);

        // ‡πÉ‡∏´‡πâ Client ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö Crystal
        RequestCollectCrystalServerRpc(playerNetworkObject.OwnerClientId);
    }

    [ServerRpc(RequireOwnership = false)]
    private void RequestCollectCrystalServerRpc(ulong playerId)
    {
        if (!IsServer || gameEnded) return;

        // ‡∏´‡∏≤ ScorePlayerScript ‡∏ï‡∏£‡∏á ‡πÜ
        var scoreScript = FindObjectOfType<ScorePlayerScript>();
        if (scoreScript != null)
        {
            scoreScript.AddScoreServerRpc(pointValue, playerId);
        }

        GetComponent<NetworkObject>().Despawn(true);
    }
}
